name: Pull from Lokalise
run-name: Pull from Lokalise [${{ github.ref_name }}] ${{ github.event.after }}
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      LOKALISE_FILE_FORMAT: ${{ vars.LOKALISE_FILE_FORMAT }}
      GITHUB_BASE_BRANCH_NAME: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Lokalise CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh
          if [ $? -ne 0 ]; then
            echo "Failed to install Lokalise CLI"
            exit 1
          fi

      - name: Pull Localization Files from Lokalise
        env:
          LOKALISE_CLI_ADD_PARAMS: ${{ vars.LOKALISE_PULL_ADDITIONAL_PARAMS }}
          LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
          LOKALISE_API_TOKEN: ${{ secrets.LOKALISE_API_TOKEN }}
        run: |
          download_files() {
            local attempt=0
            local max_retries=3
            local sleep_time=1

            while [ $attempt -lt $max_retries ]; do
              echo "Attempt $((attempt + 1)) of $max_retries"

              set +e  # Temporarily disable exit on error

              # Check if LOKALISE_CLI_ADD_PARAMS is set and not empty
              if [ -n "${LOKALISE_CLI_ADD_PARAMS}" ]; then
                additional_params="${LOKALISE_CLI_ADD_PARAMS}"
              else
                additional_params=""
              fi

              # Run the lokalise2 command and capture the output
              output=$(./bin/lokalise2 --token="${LOKALISE_API_TOKEN}" \
                --project-id="${LOKALISE_PROJECT_ID}" \
                file download \
                --format="${LOKALISE_FILE_FORMAT}" \
                --original-filenames=true \
                --directory-prefix="/" \
                --export-sort a_z \
                --filter-data=translated \
                --include-tags="${GITHUB_REF_NAME}" \
                $additional_params 2>&1)

              exit_code=$?

              set -e  # Re-enable exit on error

              # Process the output
              if [ $exit_code -ne 0 ]; then
                if echo "$output" | grep -q 'API request error 429'; then
                  attempt=$((attempt + 1))
                  echo "Attempt $attempt failed with API request error 429. Retrying in $sleep_time seconds..."
                  sleep $sleep_time
                  sleep_time=$((sleep_time * 2))
                elif echo "$output" | grep -q 'API request error'; then
                  echo "Permanent error encountered during download: $output"
                  return 1
                else
                  echo "Unexpected error occurred: $output"
                  return 1
                fi
              else
                echo "Successfully downloaded files"
                return 0
              fi
            done

            echo "Failed to download files after $max_retries attempts"
            return 1
          }

          download_files
          result=$?
          if [ $result -ne 0 ]; then
            echo "Error during file download with exit code $result"
            exit $result
          fi

      - name: Check for Changes
        id: check_changes
        run: |
          if [[ -z $(git status --untracked-files=no --porcelain) ]]; then
            echo "has_changes=false" >> $GITHUB_ENV
          else
            echo "has_changes=true" >> $GITHUB_ENV
          fi

      - name: Create Branch (if changes)
        if: env.has_changes == 'true'
        id: create_branch
        env:
          LOKALISE_BRANCH_MARKER: ${{ vars.LOKALISE_BRANCH_MARKER }}
        run: |
          SHORT_SHA=${GITHUB_SHA::6}  
          BRANCH_NAME="${{ env.LOKALISE_BRANCH_MARKER }}_${{ env.GITHUB_BASE_BRANCH_NAME }}_$SHORT_SHA"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Commit and Push Changes (if changes)
        if: env.has_changes == 'true'
        env:
          LOKALISE_FOLDER_PATH: ${{ vars.LOKALISE_TRANSLATIONS_PATH }}
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

          git add "${{ env.LOKALISE_FOLDER_PATH }}/**/*.${{ env.LOKALISE_FILE_FORMAT }}" --force
          git commit -m 'Translations update'
          git push origin "${{ env.branch_name }}"

      - name: Create Pull Request (if changes)
        if: env.has_changes == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr create --base ${{ env.GITHUB_BASE_BRANCH_NAME }} \
                       --head "${{ env.branch_name }}" \
                       --title "Lokalise translations update" \
                       --body ""

          echo "Pull Request created successfully."