name: Push to Lokalise (branches)
run-name: Push to Lokalise [${{ github.ref_name }}] ${{ github.event.after }}
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      LOKALISE_API_TOKEN: ${{ secrets.LOKALISE_API_TOKEN }}
      LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
      LOKALISE_SOURCE_LANG_ISO: ${{ vars.LOKALISE_SOURCE_LANG }}
      LOKALISE_FILE_FORMAT: ${{ vars.LOKALISE_FILE_FORMAT }}
      GIT_UPSTREAM_BRANCH: ${{ vars.GIT_UPSTREAM_BRANCH }}
      LOKALISE_TRANSLATIONS_PATH: ${{ vars.LOKALISE_TRANSLATIONS_PATH }}

    steps:
      # Checkout the repository to the GitHub runner
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch the full history of the repository to ensure all commits are available

      # Check if Triggering Branch is Default Branch
      - name: Check if Triggering Branch is Default Branch
        run: |
          if [ "${{ github.ref_name }}" = "${{ github.event.repository.default_branch }}" ]; then
            echo "The Git default branch triggered this workflow."
            echo "LOKALISE_BRANCH=master" >> $GITHUB_ENV
            echo "IS_DEFAULT_BRANCH=true" >> $GITHUB_ENV
          else
            echo "A Git feature branch triggered this workflow."
            echo "LOKALISE_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
            echo "IS_DEFAULT_BRANCH=false" >> $GITHUB_ENV
          fi

      - name: Get commit SHA of the upstream branch
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}
        run: |
          BASE_SHA=$(git rev-parse origin/${{ env.GIT_UPSTREAM_BRANCH }})
          CURRENT_SHA="${{ github.sha }}"

          if [ "$BASE_SHA" = "$CURRENT_SHA" ]; then
            echo "Identical commit hashes detected for base and current SHA. No changes detected."
            echo "SKIP_CHANGED_FILES_STEP=true" >> $GITHUB_ENV
            exit 0
          else
            echo "SKIP_CHANGED_FILES_STEP=false" >> $GITHUB_ENV
            echo "BASE_SHA=$BASE_SHA" >> $GITHUB_ENV
            echo "CURRENT_SHA=$CURRENT_SHA" >> $GITHUB_ENV
          fi

      - name: Get all changed files between branches
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' && env.SKIP_CHANGED_FILES_STEP == 'false' }}
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          base_sha: ${{ env.BASE_SHA }}
          sha: ${{ env.CURRENT_SHA }}
          files: |
            ${{ env.LOKALISE_TRANSLATIONS_PATH }}/${{ env.LOKALISE_SOURCE_LANG_ISO }}/**/*.${{ env.LOKALISE_FILE_FORMAT }}
            
      - name: Debug - changed_files.txt
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' }}
        run: |
          changed_files="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "$changed_files"

      - name: Install Lokalise CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh
          if [ $? -ne 0 ]; then
            echo "Failed to install Lokalise CLI"
            exit 1
          fi

      - name: Ensure Lokalise Branch Exists
        if: ${{ env.IS_DEFAULT_BRANCH == 'false' && steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          # Fetch the list of branches from Lokalise
          LOKALISE_BRANCHES=$(./bin/lokalise2 --token="${{ env.LOKALISE_API_TOKEN }}" \
            --project-id="${{ env.LOKALISE_PROJECT_ID }}" \
            branch list)

          # Check if the API request failed
          if echo "$LOKALISE_BRANCHES" | grep -q "API request error"; then
            echo "Error: Failed to retrieve branches from Lokalise. Exiting."
            exit 1
          fi

          # Extract branch names using jq
          LOKALISE_BRANCHES=$(echo "$LOKALISE_BRANCHES" | jq -r '.branches[].name')

          # Determine if the branch exists
          if echo "$LOKALISE_BRANCHES" | grep -qw "${{ github.ref_name }}"; then
            echo "Branch '${{ github.ref_name }}' exists in Lokalise. Continuing on Lokalise branch."
            LOKALISE_BRANCH="${{ github.ref_name }}"
          else
            echo "Branch '${{ github.ref_name }}' does not exist in Lokalise. Creating a new branch in Lokalise."
            LOKALISE_BRANCH="${{ github.ref_name }}"

            # Create a new branch in Lokalise
            RESPONSE=$(./bin/lokalise2 --token="${{ env.LOKALISE_API_TOKEN }}" \
              --project-id="${{ env.LOKALISE_PROJECT_ID }}" \
              branch create \
              --name "$LOKALISE_BRANCH")

            # Check if the branch creation was successful
            if echo "$RESPONSE" | grep -q "API request error"; then
              echo "Error: Failed to create branch in Lokalise."
              exit 1
            else
              echo "Branch created successfully in Lokalise."
            fi
          fi

          # Export the branch name to the environment
          echo "LOKALISE_BRANCH=$LOKALISE_BRANCH" >> $GITHUB_ENV

      - name: Push files to Lokalise
        env:
          LOKALISE_CLI_ADD_PARAMS: ${{ vars.LOKALISE_PUSH_ADDITIONAL_PARAMS }}
        run: |
          if [ "${{ env.IS_DEFAULT_BRANCH }}" = "true" ]; then
            PROJECT_ID_WITH_BRANCH="${{ env.LOKALISE_PROJECT_ID }}"
            localization_files=$(find "${{ env.LOKALISE_TRANSLATIONS_PATH }}" -type f -name "*.${{ env.LOKALISE_FILE_FORMAT }}")
          else
            PROJECT_ID_WITH_BRANCH="${{ env.LOKALISE_PROJECT_ID }}:${{ env.LOKALISE_BRANCH }}"
            localization_files="${{ steps.changed-files.outputs.all_changed_files }}"
            localization_files=$(echo "$localization_files" | tr ' ' '\n')
          fi

          if [ -z "$localization_files" ]; then
            echo "No localization files found to upload. Exiting."
            exit 0
          fi

          echo "PROJECT_ID_WITH_BRANCH=$PROJECT_ID_WITH_BRANCH"
          echo "Files to push to Lokalise:"
          echo "$localization_files"

          export PROJECT_ID_WITH_BRANCH  # Export the variable to make sure it's available in the subshell

          upload_file() {
            local file=$1
            local attempt=0
            local max_retries=3
            local sleep_time=1

            echo "Inside upload_file function - PROJECT_ID_WITH_BRANCH=$PROJECT_ID_WITH_BRANCH"

            if [ -n "${LOKALISE_CLI_ADD_PARAMS}" ]; then
              additional_params="${LOKALISE_CLI_ADD_PARAMS}"
            else
              additional_params=""
            fi

            echo "Starting upload for $file"
            while [ $attempt -lt $max_retries ]; do
              output=$(./bin/lokalise2 --token="${LOKALISE_API_TOKEN}" \
                --project-id="$PROJECT_ID_WITH_BRANCH" \
                file upload \
                --file="$file" \
                --lang-iso="${LOKALISE_SOURCE_LANG_ISO}" \
                --replace-modified \
                --include-path \
                --distinguish-by-file \
                --poll \
                --poll-timeout=120s \
                --tag-inserted-keys \
                --tag-skipped-keys=true \
                --tag-updated-keys \
                --tags "$GITHUB_REF_NAME" \
                $additional_params 2>&1)

              if echo "$output" | grep -q 'API request error 429'; then
                attempt=$((attempt + 1))
                echo "Attempt $attempt failed with API request error 429. Retrying in $sleep_time seconds..."
                sleep $sleep_time
                sleep_time=$((sleep_time * 2))
              elif echo "$output" | grep -q 'API request error'; then
                echo "Permanent error encountered during upload: $output"
                return 1
              else
                echo "Successfully uploaded file: $file"
                return 0
              fi
            done

            echo "Failed to upload file: $file after $max_retries attempts"
            return 1
          }

          export -f upload_file

          echo "$localization_files" | xargs -P 6 -I {} bash -c 'upload_file "$@"' _ {}
          result=$?
          if [ $result -ne 0 ]; then
            echo "Error during file upload with exit code $result"
            exit $result
          fi