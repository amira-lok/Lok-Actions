name: Push to Lokalise
run-name: Push to Lokalise [${{ github.ref_name }}] ${{ github.event.after }}
on:
  workflow_dispatch:
  # Uncomment to run on PR merge:
  # pull_request_target:
  #   types: [closed]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VAR_LOKALISE_API_TOKEN: ${{ secrets.LOKALISE_API_TOKEN }}
      VAR_LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
      VAR_LOKALISE_SOURCE_LANG_ISO: ${{ vars.LOKALISE_SOURCE_LANG }}
      VAR_FOLDER_PATH: ${{ vars.LOKALISE_TRANSLATIONS_PATH }}
      VAR_FILE_FORMAT: ${{ vars.LOKALISE_FILE_FORMAT }}
      VAR_ADD_CLI_PARAMS: ${{ vars.LOKALISE_PUSH_ADDITIONAL_PARAMS }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine upstream branch
        id: determine-branch
        run: |
          echo "Starting upstream branch determination"
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            if [[ -n "${{ github.event.pull_request.base.ref }}" ]]; then
              echo "Pull request base ref is not empty"
              echo "${{ github.event.pull_request.base.ref }}" > upstream_branch.txt
            else
              echo "Pull request base ref is empty, using default branch"
              echo "${{ github.event.repository.default_branch }}" > upstream_branch.txt
            fi
          else
            echo "Event is not pull_request, using default branch"
            echo "${{ github.event.repository.default_branch }}" > upstream_branch.txt
          fi
          echo "Upstream branch determined"

      - name: Get changed JSON files
        id: get-changed-files
        run: |
          UPSTREAM_BRANCH=$(cat upstream_branch.txt)
          git fetch origin $UPSTREAM_BRANCH
          if [ "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}" ]; then
            echo "Comparing last two commits on the default branch"
            git diff --name-only HEAD~1 HEAD -- "${{ env.VAR_FOLDER_PATH }}/${{ env.VAR_LOKALISE_SOURCE_LANG_ISO }}/**.${{ env.VAR_FILE_FORMAT }}" > changed_files.txt
          else
            echo "Comparing branch to upstream branch"
            git diff --name-only origin/$UPSTREAM_BRANCH...HEAD -- "${{ env.VAR_FOLDER_PATH }}/${{ env.VAR_LOKALISE_SOURCE_LANG_ISO }}/**.${{ env.VAR_FILE_FORMAT }}" > changed_files.txt
          fi

      - name: Check for Changed Files
        run: |
          if [ ! -s changed_files.txt ]; then
            echo "No JSON files changed."
            exit 0
          fi

      - name: Install Lokalise CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh
          if [ $? -ne 0 ]; then
            echo "Failed to install Lokalise CLI"
            exit 1
          fi
        
      - name: Push Localization Files to Lokalise
        run: |
          upload_file() {
            local file=$1
            local attempt=0
            local max_retries=3
            local sleep_time=1

            # Check if VAR_ADD_CLI_PARAMS is set and not empty
            if [ -n "${VAR_ADD_CLI_PARAMS}" ]; then
              additional_params="${VAR_ADD_CLI_PARAMS}"
            else
              additional_params=""
            fi

            echo "Starting upload for $file"
            while [ $attempt -lt $max_retries ]; do
              output=$(./bin/lokalise2 --token="${VAR_LOKALISE_API_TOKEN}" \
                --project-id="${VAR_LOKALISE_PROJECT_ID}" \
                file upload \
                --file="$file" \
                --lang-iso="${VAR_LOKALISE_SOURCE_LANG_ISO}" \
                --replace-modified \
                --include-path \
                --use-automations=true \
                --distinguish-by-file \
                --poll \
                --poll-timeout=120s \
                --tag-inserted-keys \
                --tag-skipped-keys=true \
                --tag-updated-keys \
                --tags "$GITHUB_REF_NAME" \
                $additional_params 2>&1)

              if echo "$output" | grep -q 'API request error 429'; then
                attempt=$((attempt + 1))
                echo "Attempt $attempt failed with API request error 429. Retrying in $sleep_time seconds..."
                sleep $sleep_time
                sleep_time=$((sleep_time * 2))
              elif echo "$output" | grep -q 'API request error'; then
                echo "Permanent error encountered during upload: $output"
                return 1
              else
                echo "Successfully uploaded file: $file"
                return 0
              fi
            done

            echo "Failed to upload file: $file after $max_retries attempts"
            return 1
          }

          export -f upload_file

          cat changed_files.txt | xargs -P 6 -I {} bash -c 'upload_file "{}"'
          result=$?
          if [ $result -ne 0 ]; then
            echo "Error during file upload with exit code $result"
            exit $result
          fi