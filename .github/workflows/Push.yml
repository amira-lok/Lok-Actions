name: Push to Lokalise
run-name: Push to Lokalise [${{ github.ref_name }}] ${{ github.event.after }}
on:
  workflow_dispatch:
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VAR_LOKALISE_API_TOKEN: ${{ secrets.API_TOKEN }}
      VAR_LOKALISE_PROJECT_ID: ${{ vars.LOKALISE_PROJECT_ID }}
      VAR_LOKALISE_SOURCE_LANG_ISO: ${{ vars.SOURCE_LANG }}
      VAR_FOLDER_PATH: ${{ vars.FOLDER_PATH }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Lokalise CLI
        run: curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh

      - name: Debug Environment Variables
        run: |
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "GitHub Event Pull Request Base Ref: ${{ github.event.pull_request.base.ref }}"
          echo "GitHub Default Branch: ${{ github.event.repository.default_branch }}"

      - name: Determine upstream branch
        id: determine-branch
        run: |
          echo "Starting upstream branch determination"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ -n "${{ github.event.pull_request.base.ref }}" ]]; then
              echo "Pull request base ref is not empty"
              echo "${{ github.event.pull_request.base.ref }}" > upstream_branch.txt
            else
              echo "Pull request base ref is empty, using default branch"
              echo "${{ github.event.repository.default_branch }}" > upstream_branch.txt
            fi
          else
            echo "Event is not pull_request, using default branch"
            echo "${{ github.event.repository.default_branch }}" > upstream_branch.txt
          fi
          echo "Upstream branch determined"

      - name: Get changed JSON files
        id: get-changed-files
        run: |
          UPSTREAM_BRANCH=$(cat upstream_branch.txt)
          echo "Upstream Branch: $UPSTREAM_BRANCH"
          git fetch origin $UPSTREAM_BRANCH
          if [ "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}" ]; then
            echo "Comparing last two commits on the default branch"
            git diff --name-only HEAD~1 HEAD -- "${{ env.VAR_FOLDER_PATH }}/${{ env.VAR_LOKALISE_SOURCE_LANG_ISO }}/**.json" > changed_files.txt
          else
            echo "Comparing branch to upstream branch"
            git diff --name-only origin/$UPSTREAM_BRANCH...HEAD -- "${{ env.VAR_FOLDER_PATH }}/${{ env.VAR_LOKALISE_SOURCE_LANG_ISO }}/**.json" > changed_files.txt
          fi

      - name: Upload Changed Files Artifact
        uses: actions/upload-artifact@v4
        with:
          name: changed-files
          path: changed_files.txt

      - name: Download Changed Files Artifact
        uses: actions/download-artifact@v4
        with:
          name: changed-files

      - name: Print Changed Files
        run: |
          echo "Changed JSON files:"
          cat changed_files.txt

      - name: Check for Changed Files
        run: |
          if [ ! -s changed_files.txt ]; then
            echo "No JSON files changed."
            exit 0
          fi

      # - name: Push Localization Files to Lokalise
      #   run: |
      #     chmod +x ./upload_to_lokalise.sh
      #     cat changed_files.txt | xargs -P 6 -I {} bash -c './upload_to_lokalise.sh upload_file "{}"' > upload_log.txt 2>&1
      #     cat upload_log.txt
      - name: Push Localization Files to Lokalise
        run: |
          upload_file() {
            local file=$1
            local attempt=0
            local max_retries=3
            local sleep_time=1

            echo "Starting upload for $file"
            while [ $attempt -lt $max_retries ]; do
              echo "Attempt $((attempt + 1)) for $file"
              output=$(./bin/lokalise2 --token="${VAR_LOKALISE_API_TOKEN}" \
                --project-id="${VAR_LOKALISE_PROJECT_ID}" \
                file upload \
                --file="$file" \
                --lang-iso="${VAR_LOKALISE_SOURCE_LANG_ISO}" \
                --replace-modified \
                --include-path \
                --use-automations=true \
                --distinguish-by-file \
                --poll \
                --poll-timeout=120s \
                --tag-inserted-keys \
                --tag-skipped-keys=true \
                --tag-updated-keys \
                --tags $GITHUB_REF_NAME 2>&1)

              echo "Output from upload:"
              echo "$output"
              
              http_code=$(echo "$output" | grep -oP 'HTTP/\d+\.\d+ \K\d+')

              if [ "$http_code" -eq 429 ]; then
                attempt=$((attempt + 1))
                echo "Attempt $attempt failed with HTTP 429. Retrying in $sleep_time seconds..."
                sleep $sleep_time
                sleep_time=$((sleep_time * 2))
              else
                if [ "$http_code" -ne 200 ]; then
                  echo "Failed to upload file: $file"
                  echo "Error: $output"
                  return 1
                else
                  echo "Successfully uploaded file: $file"
                  return 0
                fi
              fi
            done

            echo "Failed to upload file: $file after $max_retries attempts"
            return 1
          }

          while IFS= read -r file; do
            echo "Uploading $file"
            upload_file "$file"
            result=$?
            if [ $result -ne 0 ]; then
              echo "Error uploading $file"
              exit $result
            fi
          done < changed_files.txt